@charset "UTF-8";
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */
/* Document
========================================================================== */
/**
* 1. Correct the line height in all browsers.
* 2. Prevent adjustments of font size after orientation changes in iOS.
*/
html {
  line-height: 1.15; /* 1 */
  -webkit-text-size-adjust: 100%; /* 2 */
}

/* Sections
    ========================================================================== */
/**
* Remove the margin in all browsers.
*/
body {
  margin: 0;
}

/**
* Render the `main` element consistently in IE.
*/
main {
  display: block;
}

/**
* Correct the font size and margin on `h1` elements within `section` and
* `article` contexts in Chrome, Firefox, and Safari.
*/
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
    ========================================================================== */
/**
* 1. Add the correct box sizing in Firefox.
* 2. Show the overflow in Edge and IE.
*/
hr {
  box-sizing: content-box; /* 1 */
  height: 0; /* 1 */
  overflow: visible; /* 2 */
}

/**
* 1. Correct the inheritance and scaling of font size in all browsers.
* 2. Correct the odd `em` font sizing in all browsers.
*/
pre {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/* Text-level semantics
    ========================================================================== */
/**
* Remove the gray background on active links in IE 10.
*/
a {
  background-color: transparent;
}

/**
* 1. Remove the bottom border in Chrome 57-
* 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
*/
abbr[title] {
  border-bottom: none; /* 1 */
  text-decoration: underline; /* 2 */
  text-decoration: underline dotted; /* 2 */
}

/**
* Add the correct font weight in Chrome, Edge, and Safari.
*/
b,
strong {
  font-weight: bolder;
}

/**
* 1. Correct the inheritance and scaling of font size in all browsers.
* 2. Correct the odd `em` font sizing in all browsers.
*/
code,
kbd,
samp {
  font-family: monospace, monospace; /* 1 */
  font-size: 1em; /* 2 */
}

/**
* Add the correct font size in all browsers.
*/
small {
  font-size: 80%;
}

/**
* Prevent `sub` and `sup` elements from affecting the line height in
* all browsers.
*/
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
    ========================================================================== */
/**
* Remove the border on images inside links in IE 10.
*/
img {
  border-style: none;
}

/* Forms
    ========================================================================== */
/**
* 1. Change the font styles in all browsers.
* 2. Remove the margin in Firefox and Safari.
*/
button,
input,
optgroup,
select,
textarea {
  font-family: inherit; /* 1 */
  font-size: 100%; /* 1 */
  line-height: 1.15; /* 1 */
  margin: 0; /* 2 */
}

/**
* Show the overflow in IE.
* 1. Show the overflow in Edge.
*/
button,
input { /* 1 */
  overflow: visible;
}

/**
* Remove the inheritance of text transform in Edge, Firefox, and IE.
* 1. Remove the inheritance of text transform in Firefox.
*/
button,
select { /* 1 */
  text-transform: none;
}

/**
* Correct the inability to style clickable types in iOS and Safari.
*/
button,
[type=button],
[type=reset],
[type=submit] {
  -webkit-appearance: button;
}

/**
* Remove the inner border and padding in Firefox.
*/
button::-moz-focus-inner,
[type=button]::-moz-focus-inner,
[type=reset]::-moz-focus-inner,
[type=submit]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

/**
* Restore the focus styles unset by the previous rule.
*/
button:-moz-focusring,
[type=button]:-moz-focusring,
[type=reset]:-moz-focusring,
[type=submit]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
* Correct the padding in Firefox.
*/
fieldset {
  padding: 0.35em 0.75em 0.625em;
}

/**
* 1. Correct the text wrapping in Edge and IE.
* 2. Correct the color inheritance from `fieldset` elements in IE.
* 3. Remove the padding so developers are not caught out when they zero out
*    `fieldset` elements in all browsers.
*/
legend {
  box-sizing: border-box; /* 1 */
  color: inherit; /* 2 */
  display: table; /* 1 */
  max-width: 100%; /* 1 */
  padding: 0; /* 3 */
  white-space: normal; /* 1 */
}

/**
* Add the correct vertical alignment in Chrome, Firefox, and Opera.
*/
progress {
  vertical-align: baseline;
}

/**
* Remove the default vertical scrollbar in IE 10+.
*/
textarea {
  overflow: auto;
}

/**
* 1. Add the correct box sizing in IE 10.
* 2. Remove the padding in IE 10.
*/
[type=checkbox],
[type=radio] {
  box-sizing: border-box; /* 1 */
  padding: 0; /* 2 */
}

/**
* Correct the cursor style of increment and decrement buttons in Chrome.
*/
[type=number]::-webkit-inner-spin-button,
[type=number]::-webkit-outer-spin-button {
  height: auto;
}

/**
* 1. Correct the odd appearance in Chrome and Safari.
* 2. Correct the outline style in Safari.
*/
[type=search] {
  -webkit-appearance: textfield; /* 1 */
  outline-offset: -2px; /* 2 */
}

/**
* Remove the inner padding in Chrome and Safari on macOS.
*/
[type=search]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
* 1. Correct the inability to style clickable types in iOS and Safari.
* 2. Change font properties to `inherit` in Safari.
*/
::-webkit-file-upload-button {
  -webkit-appearance: button; /* 1 */
  font: inherit; /* 2 */
}

/* Interactive
    ========================================================================== */
/*
* Add the correct display in Edge, IE 10+, and Firefox.
*/
details {
  display: block;
}

/*
* Add the correct display in all browsers.
*/
summary {
  display: list-item;
}

/* Misc
    ========================================================================== */
/**
* Add the correct display in IE 10+.
*/
template {
  display: none;
}

/**
* Add the correct display in IE 10.
*/
[hidden] {
  display: none;
}

/* Variables de los colores  */
a {
  text-decoration: none;
  color: black;
}

/* Dise√±o de botones */
.btn {
  font-size: 16px;
  border-radius: 10px;
  padding: 12px 16px;
  text-align: center;
  font-weight: 600;
  width: 10rem;
  background-color: #00bf63;
  margin: auto;
  cursor: pointer;
}
.btn .icono {
  opacity: 0;
}
.btn:hover .icono {
  transition: all 0.8s ease;
  background-color: #0092e9;
  opacity: 1;
  margin-left: 1rem;
}

svg {
  width: 20px;
  height: 20px;
}

<<<<<<< HEAD
/* Importando el archivo de variables para usarlo con la letra V  */
.menu {
  background-color: #00bf63;
  width: 100%;
  background: #7f8c8d;
  font-family: Georgia, "Times New Roman", Times, serif;
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 0.5rem 1.5rem;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 1000;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.15);
}

header.menu h1 {
  font-size: 1.2rem;
  color: #fff;
  font-weight: 600;
  margin-left: 0.6rem;
}

header.menu img[alt=LogoLibro] {
  height: 40px;
  width: 40px;
  object-fit: cover;
  border-radius: 50%;
  border: 2px solid #52e10a;
  margin-left: 1rem;
  order: -1;
}

header.menu nav ul {
  list-style: none;
  display: flex;
  align-items: center;
  gap: 1.5rem;
}

header.menu nav ul li a {
  text-decoration: none;
  color: #fff;
  font-weight: 500;
  font-size: 0.95rem;
  padding: 0.4rem 1rem;
  border-radius: 30px;
  transition: all 0.3s ease;
}

header.menu nav ul li a:hover {
  background: linear-gradient(135deg, #00bf63, #88bdbc);
  color: #fff;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
}

header.menu nav ul img {
  height: 28px;
  width: auto;
  cursor: pointer;
  transition: transform 0.2s ease;
  position: relative;
}

header.menu nav ul img:hover {
  transform: scale(1.1);
}

=======
>>>>>>> 38e93021f4b5c2831f8230790d639a3c78ba0946
.hero {
  margin: auto;
  margin-top: 7rem;
  display: flex;
  width: 90%;
  max-width: 1200px;
  height: 500px;
  background: #ffffff;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
  position: relative;
  border-radius: 5px;
  overflow: hidden;
}
.hero::before {
  content: "";
  position: absolute;
  top: 0;
  left: 50%;
  width: 2px;
  height: 100%;
  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0));
}
.hero .pagina {
  width: 50%;
  padding: 40px;
}
.hero .pagina-izq {
  background: #faf9f4;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
}
.hero .pagina-izq h1 {
  color: green;
}
.hero .pagina-izq p {
  font-size: 30px;
}
.hero .pagina-der {
  background: #fdfcf7;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: justify;
<<<<<<< HEAD
}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
=======
}

.titulo-nuevo {
  margin: auto;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);
  width: 96%;
  height: 100px;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-top: 2rem;
  border-radius: 20px;
}

.seccion-nuevo {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  padding: 2rem;
  gap: 1rem;
}
.seccion-nuevo .contenedor-card {
  width: 90%;
  border: 2px solid;
  padding: 1rem;
}
.seccion-nuevo .contenedor-card .cont-nuevo {
  display: flex;
  width: 100%;
  gap: 2rem;
}
.seccion-nuevo .contenedor-card .cont-nuevo .img-nuevo {
  width: 60%;
  height: 50%;
  margin-bottom: 10px;
}
.seccion-nuevo .contenedor-card .cont-nuevo .img-nuevo img {
  width: 100%;
  height: 250px;
}
.seccion-nuevo .contenedor-card .btns-nuevo {
  display: flex;
}

.compras {
  margin: auto;
}
.compras .contenedor-compras {
  margin: 2rem;
  border: 2px solid;
  padding: 1rem;
  display: flex;
  gap: 1rem;
  width: 94%;
}
.compras .contenedor-compras .image-compra {
  width: 20%;
  height: 30vh;
}
.compras .contenedor-compras .image-compra img {
  width: 100%;
  height: 100%;
}
.compras .contenedor-compras .info-compra {
  width: 60%;
  display: flex;
  padding: 1rem;
  align-items: center;
  gap: 2rem;
}
.compras .contenedor-compras .info-compra .info1 {
  width: 30%;
}
.compras .contenedor-compras .info-compra .info1 .contendeor-cant {
  display: flex;
}
.compras .contenedor-compras .info-compra .info1 .contendeor-cant .cant {
  padding: 0.4rem;
  width: 60px;
  border: 2px solid;
  font-size: 24px;
  font-weight: 800;
}
.compras .contenedor-compras .info-compra .info1 .contendeor-cant .num {
  padding: 0.4rem;
  border: 2px solid;
  width: 50px;
<<<<<<< HEAD
}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
=======
}/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
>>>>>>> 38e93021f4b5c2831f8230790d639a3c78ba0946
>>>>>>> 5b291af69b9a431c257fbf62e80347e94efeb11e
